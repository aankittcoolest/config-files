#+STARTUP: overview
* Set TLS settings
#+BEGIN_SRC emacs-lisp
(setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
#+END_SRC


* Remove startup messages and status line windows
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (menu-bar-mode -1)
  ;(toggle-scroll-bar -1)
  (tool-bar-mode -1)
  (setq-default mode-line-format nil)
  (setq initial-scratch-message ";; Hello Ankit!")
  (set-frame-parameter nil 'fullscreen 'fullboth)

  ;; (use-package eterm-256color
  ;; :ensure t)

  ;; (use-package xterm-color
  ;; :ensure t)
  ;; (add-hook 'term-mode-hook #'eterm-256color-mode)

  ;;change all prompts to y or n
  (fset 'yes-or-no-p 'y-or-n-p)

  ;;follow symlinks
  (setq vc-follow-symlinks t)
  
;; testing shell clear settings
(add-hook 'comint-mode-hook
          (defun rm-comint-postoutput-scroll-to-bottom ()
            (remove-hook 'comint-output-filter-functions
                         'comint-postoutput-scroll-to-bottom)))
#+END_SRC


* Keyboard mappings
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<f12>") 'package-refresh-contents)
(global-set-key (kbd  "<f5>") 'revert-buffer)
(global-set-key (kbd "C-x p") 'find-file-at-point)
(global-set-key [(meta shift-up)] 'move-line-up)
(global-set-key [(meta shift-down)] 'move-line-down)
(global-set-key (kbd "C-c d") (lambda () (interactive) (insert "(/)")))
(global-set-key (kbd "C-c i") (lambda () (interactive) (insert "(on)")))
#+END_SRC

#+RESULTS:
| lambda | nil | (interactive) | (insert (on)) |



* Initialize package and install a package installer helper
#+BEGIN_SRC emacs-lisp
(package-initialize)

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
#+END_SRC


* Install some helping packages (try and which)
#+BEGIN_SRC emacs-lisp
(use-package try
  :ensure t)

(use-package which-key
  :ensure t
  :config (which-key-mode))
#+END_SRC


* Packages for org-mode
  SCHEDULED: <2018-10-08 Mon>
#+BEGIN_SRC emacs-lisp
;;bullets package to show fancy bullets
(use-package org-bullets
  :ensure t
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
  
;;enable specific languages for org mode
(org-babel-do-load-languages
'org-babel-load-languages
'((shell . t)))

(defun my-org-confirm-babel-evaluate (lang body)
  (not (member lang '("shell" "emacs-lisp"))))

(setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)

(add-hook 'org-mode-hook
          (lambda ()
            (local-set-key (kbd "\C-c SPC") 'ace-jump-mode)))
	    
(use-package htmlize
   :ensure t)
#+END_SRC

#+RESULTS:
: t


* Utility packages for faster moving around
#+BEGIN_SRC emacs-lisp
;;ace-window: package to switch windows quickly
(use-package ace-window
  :ensure t
  :init
  (progn
    (global-set-key [remap other-window] 'ace-window)
    (custom-set-faces
     '(aw-leading-char-face
       ((t (:inherit ace-jump-face-foreground :height 3.0)))))
    ))
    

;;install ace-jump
(use-package ace-jump-mode
  :ensure t)
(global-set-key (kbd "C-c SPC") 'ace-jump-mode)
#+END_SRC


* Vim mappings/similar functionalities Evil mode packages and settings
#+BEGIN_SRC emacs-lisp
(use-package evil
  :ensure t
  :init
  (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
  (setq evil-want-keybinding nil)
  :config
  (evil-mode 1))

  (use-package evil-magit
  :ensure t)

(use-package evil-collection
  :after evil
  :ensure t
  :config
  (evil-collection-init))


  (setq evil-want-C-i-jump nil)
  (use-package evil
    :ensure t)
  (evil-mode 1)
  (define-key evil-normal-state-map "\C-q" 'evil-visual-block)

  (use-package neotree
    :ensure t)
  

  
  (use-package key-chord
  :ensure t)

  (setq key-chord-two-keys-delay 0.5)
  (key-chord-define evil-insert-state-map "jj" 'evil-normal-state)
  (key-chord-mode 1)
  
#+END_SRC


* Utilities to increase ability of emacs
#+BEGIN_SRC emacs-lisp
;;auto complete package
(use-package auto-complete
  :ensure t
  :init
  (progn
    (ac-config-default)
    (global-auto-complete-mode t)
    ))
    (define-key ac-mode-map (kbd "M-/") 'auto-complete)
    
(add-to-list 'ac-modes 'org-mode)

;;try flyspell
(use-package auto-dictionary
  :ensure t)
(add-hook 'flyspell-mode-hook (lambda () (auto-dictionary-mode 1)))

;; install pdf viewer
;;(use-package pdf-tools
;;	     :ensure t
;;	     :config
;;	     (pdf-tools-install))
;;
;;(use-package org-pdfview
;;  :ensure t)
#+END_SRC

#+RESULTS:


* Customized settings for emacs
#+BEGIN_SRC emacs-lisp
;;define function to kill buffer without prompt if it is not modified.
(defun volatile-kill-buffer ()
  (interactive)
  (let ((buffer-modified-p nil))
    (kill-buffer (current-buffer))))

(global-set-key (kbd "C-x k") 'volatile-kill-buffer)

;;set up things as UTF-8
(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-language-environment "utf-8")
;; Treat clipboard input as UTF-8 string first; compound text next, etc.
(setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))
(set-buffer-multibyte nil)
(set-buffer-multibyte t)

(use-package unicode-fonts
:ensure t)
(unicode-fonts-setup)

;; set a default font
(when (member "DejaVu Sans Mono" (font-family-list))
        (set-face-attribute 'default nil :font "DejaVu Sans Mono"))
(set-face-attribute 'default nil :height 160)

#+END_SRC


* Browser and link related packages
#+BEGIN_SRC emacs-lisp

;;Commenting out these lines to check out mac default browser(chrome)
;;(setq browse-url-browser-function 'browse-url-generic
;;            browse-url-generic-program "google-chrome")
(setq browse-url-browser-function 'browse-url-default-macosx-browser)



;; Determine the specific system type. ;; Emacs variable system-type doesn't yet have a "wsl/linux" value,
;; so I'm front-ending system-type with my variable: sysTypeSpecific.
;; I'm no elisp hacker, so I'm diverging from the elisp naming convention
;; to ensure that I'm not stepping on any pre-existing variable.
;;(setq-default sysTypeSpecific  system-type) ;; get the system-type value
;;
;;(cond
;; ;; If type is "gnu/linux", override to "wsl/linux" if it's WSL.
;; ((eq sysTypeSpecific 'gnu/linux)
;;  (when (string-match "Linux.*Microsoft.*Linux"
;;		      (shell-command-to-string "uname -a"))
;;
;;    (setq-default sysTypeSpecific "wsl/linux") ;; for later use.
;;    (setq
;;     cmdExeBin"/mnt/c/Windows/System32/cmd.exe"
;;     cmdExeArgs '("/c" "start" "") )
;;    (setq
;;     browse-url-generic-program  cmdExeBin
;;     browse-url-generic-args     cmdExeArgs
;;     browse-url-browser-function 'browse-url-generic)
;;         )))
;;(setq
;;     cmdExeBin"/mnt/c/Windows/System32/cmd.exe"
;;     cmdExeArgs '("/c" "start" "") )
;;    (setq
;;     browse-url-generic-program  cmdExeBin
;;     browse-url-generic-args     cmdExeArgs
;;     browse-url-browser-function 'browse-url-generic)

#+END_SRC


* Dired mode related settings
#+BEGIN_SRC emacs-lisp
;; enable dired-mode-x
(add-hook 'dired-load-hook
	  (lambda ()
	    (load "dired-x")
	    ;; Set dired-x global variables here.  For example:
	    ;; (setq dired-guess-shell-gnutar "gtar")
	    ;; (setq dired-x-hands-off-my-keys nil)
	    ))
(add-hook 'dired-mode-hook
	  (lambda ()
	    ;; Set dired-x buffer-local variables here.  For example:
	    ;; (dired-omit-mode 1)
	                     ))

;;SAMPLE: open text files in notepad++
(setq dired-guess-shell-alist-user '(("\\.txt$" "\/mnt\/c\/Program\\ Files\\ \\(x86\\)\/Notepad++\/notepad++.exe ")))

(defun xah-dired-mode-setup ()
  "to be run as hook for 'dired-mode'."
  (dired-hide-details-mode 1))
(add-hook 'dired-mode-hook 'xah-dired-mode-setup)

;;install dired narrow
  (use-package dired-hacks-utils
  :ensure t)
#+END_SRC



* Theme/icons related setting 
#+BEGIN_SRC emacs-lisp

(use-package powerline
:ensure t)
(powerline-center-evil-theme)

(load-theme 'tango-dark t) 
 (use-package all-the-icons
 :ensure t)
(setq neo-theme (if (display-graphic-p) 'icons 'arrow))
#+END_SRC 

* Reveal js
#+BEGIN_SRC emacs-lisp
  (use-package ox-reveal
  :ensure t)

  (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
  (setq org-reveal-mathjax t)
#+END_SRC

#+RESULTS:
: t


* Atomic chrome
#+BEGIN_SRC emacs-lisp
(require 'atomic-chrome)
(atomic-chrome-start-server)
;;  (setq atomic-chrome-server-ghost-text-port 4002)
  ;; (setq atomic-chrome-default-major-mode 'markdown-mode)
#+END_SRC


* Projectile (fuzzy-search)
#+BEGIN_SRC emacs-lisp
(use-package projectile
:ensure t)
(projectile-mode +1)
(define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)

#+END_SRC


* mu4e Mailing stuffs
#+BEGIN_SRC emacs-lisp
(use-package org-mime
  :ensure t)
(load-file "~/config-files/settings/emacs/mu4econfig.el")
#+END_SRC

* Processes handling
#+BEGIN_SRC emacs-lisp
(load-file "~/config-files/settings/emacs/process.el")
#+END_SRC


* Copy and paste on windows
#+BEGIN_SRC emacs-lisp
(setq x-select-enable-clipboard t)
#+END_SRC

#+RESULTS:
: t


* Keyboard map shell commands
#+BEGIN_SRC emacs-lisp
(defun todo ()
 "lists the contents of current directory"
 (interactive)
 (insert (shell-command-to-string "sh ~/config-files/settings/emacs/todo_template.sh")))

(global-set-key (kbd "C-x t") 'todo)
#+END_SRC 


* Map keyboard regex commands
#+BEGIN_SRC emacs-lisp
(fset 'done
   ":s/\\([ ]+\\)\\(.*\\)/\\1+\\2+\C-m")
#+END_SRC


* Set up calendar to set up current date
#+BEGIN_SRC emacs-lisp
(use-package calendar
    :ensure t)

;;(defun insdate-insert-current-date (&optional omit-day-of-week-p)
;;  "Insert today's date using the current locale.
;;   With tha prefix argument, the date is inserted without the day
;;   of the week."
;;   (interactive "p*")
;;   (insert (calendar-date-string (calendar-current-date) nil
;;                                 omit-day-of-week-p)))

#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun xah-insert-date ()
  "Insert current date time.
Insert date in this format: yyyy-mm-dd.
When called with `universal-argument', prompt for a format to use.
If there's text selection, delete it first.

URL `http://ergoemacs.org/emacs/elisp_insert-date-time.html'
version 2018-07-03"
  (interactive)
  (let (($style
         (if current-prefix-arg
             (string-to-number
              (substring
               (ido-completing-read
                "Style:"
                '(
                  "1 → 2018-04-12 Thursday"
                  "2 → 20180412224611"
                  "3 → 2018-04-12T22:46:11-07:00"
                  "4 → 2018-04-12 22:46:11-07:00"
                  "5 → Thursday, April 12, 2018"
                  "6 → Thu, Apr 12, 2018"
                  "7 → April 12, 2018"
                  "8 → Apr 12, 2018"
                  )) 0 1))
           0
           )))
    (when (use-region-p) (delete-region (region-beginning) (region-end)))
    (insert
     (cond
      ((= $style 0)
       ;; "2016-10-10"
       (format-time-string "%Y-%m-%d"))
      ((= $style 1)
       ;; "2018-04-12 Thursday"

       (format-time-string "%Y-%m-%d %A"))
      ((= $style 2)
       ;; "20180412224015"
       (replace-regexp-in-string ":" "" (format-time-string "%Y%m%d%T")))
      ((= $style 3)
       (concat
        (format-time-string "%Y-%m-%dT%T")
        (funcall (lambda ($x) (format "%s:%s" (substring $x 0 3) (substring $x 3 5))) (format-time-string "%z")))
       ;; "2018-04-12T22:45:26-07:00"
       )
      ((= $style 4)
       (concat
        (format-time-string "%Y-%m-%d %T")
        (funcall (lambda ($x) (format "%s:%s" (substring $x 0 3) (substring $x 3 5))) (format-time-string "%z")))
       ;; "2018-04-12 22:46:11-07:00"
       )
      ((= $style 5)
       (format-time-string "%A, %B %d, %Y")
       ;; "Thursday, April 12, 2018"
       )
      ((= $style 6)
       (format-time-string "%a, %b %d, %Y")
       ;; "Thu, Apr 12, 2018"
       )
      ((= $style 7)
       (format-time-string "%B %d, %Y")
       ;; "April 12, 2018"
       )
      ((= $style 8)
       (format-time-string "%b %d, %Y")
       ;; "Apr 12, 2018"
       )
      (t
       (format-time-string "%Y-%m-%d"))))))
       
#+END_SRC

* Customize colors for TODO items
#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords
  '((sequence "🔖 TODO" "🏃 IN-PROGRESS" "🗓  MEETING"  "🍻 ATTENDED" "⏱  WAITING" "|" "✅ DONE" "❌ CANCELED"))
)

(setq org-todo-keyword-faces
'(("🏃 IN-PROGRESS" . "orange") ("⏱  WAITING" . "magenta")
\ ("❌ CANCELED" . "red") ("✅ DONE" . "green") ("🗓  MEETING" . "brightyellow") ("🍻 ATTENDED" . "color-231"))
)
#+END_SRC


* Adding emojis
#+BEGIN_SRC emacs-lisp
(use-package emojify
:ensure t)
(add-hook 'after-init-hook #'global-emojify-mode)
#+END_SRC

* Events-diary
#+BEGIN_SRC emacs-lisp
  ;; (diary)
  ;; (define-key global-map "\C-ca" 'org-agenda)
  ;; (setq org-agenda-include-diary t)
  ;; (setq org-agenda-files (list "~/notes/TODO.org"))
  ;; (setq org-default-notes-file "~/notes/TODO.org")
#+END_SRC



* Confluence specific settings
#+BEGIN_SRC emacs-lisp
(load-file "~/config-files/settings/emacs/ox-confluence.el")
#+END_SRC


* Adding terminal zsh
#+BEGIN_SRC emacs-lisp
  (use-package multi-term
  :ensure t)
  (setq multi-term-program "/usr/local/bin/fish")
  ;; (setq multi-term-program "/bin/zsh")
  (global-set-key (kbd "<f9>") 'multi-term)

#+END_SRC

#+BEGIN_SRC emacs-lisp
;Clear the eshell buffer.
(defun eshell/clear ()      
   (let ((eshell-buffer-maximum-lines 0)) (eshell-truncate-buffer)))
#+END_SRC

#+RESULTS:
: eshell/clear

* Adding magit/git settings
#+BEGIN_SRC emacs-lisp
(use-package magit
:ensure t)
#+END_SRC


* Remote servers connections
#+BEGIN_SRC emacs-lisp
(defun connect-remote ()
  (interactive)
  (dired "/ankit.agrawal@10.131.30.58:/"))
#+END_SRC


* org-mode addons
#+BEGIN_SRC emacs-lisp
(use-package ox-jira
:ensure t)
#+END_SRC



* configure slack
- Installing alerts
#+BEGIN_SRC emacs-lisp
(use-package alert
  :commands (alert)
  :init
  (setq alert-default-style 'notifier))
#+END_SRC

- Installing IRC package for emacs
#+BEGIN_SRC emacs-lisp
(use-package circe
:ensure t)
#+END_SRC

- Enabling oauth2
#+BEGIN_SRC emacs-lisp
;;(load-file "~/config-files/settings/emacs/mu4econfig.el")
#+END_SRC

- Installing request package for emacs
#+BEGIN_SRC emacs-lisp
(use-package request
:ensure t)
#+END_SRC

- Installing websocket package for emacs
#+BEGIN_SRC emacs-lisp
(use-package websocket
:ensure t)
#+END_SRC

- Install emacs-slack
#+BEGIN_SRC emacs-lisp
;;(el-get-bundle slack)
(use-package slack
  :commands (slack-start)
  :init
  :ensure t)
  (use-package slack
  :commands (slack-start)
  :init
  (setq slack-prefer-current-team t)
  :config
  (slack-register-team
   :name "rakutenmarketing"
   :default t
   :client-id "209141811057.713360595590"
   :client-secret "79ca6b9b8813420de9e73a61169694e0"
   :subscribed-channels '(rmjp-daily-alerts)
   :full-and-display-names t))
  #+END_SRC



  
* Different themese for different buffers
#+BEGIN_SRC emacs-lisp
(use-package load-theme-buffer-local
:ensure t)
#+END_SRC


* Rest client Emacs

#+BEGIN_SRC emacs-lisp
(use-package restclient
:ensure t)

(use-package company-restclient
:ensure t
:config
(add-to-list 'company-backends 'company-restclient))
#+END_SRC


* Copy into mac clipboard
#+BEGIN_SRC emacs-lisp
(defun pbcopy (&optional b e) 
  (interactive "r")
  (shell-command-on-region b e "pbcopy"))
#+END_SRC




* Yasnippets
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :ensure t
  :init
  ;;(setq yas-snippet-dirs '( "~/.emacs.d/snippets/test/" ))
    (yas-global-mode 1))

(use-package yasnippet-snippets
  :ensure t)
#+END_SRC



* Github markdown
#+BEGIN_SRC emacs-lisp
(use-package markdown-toc
  :ensure t)
#+END_SRC




* json mode
#+BEGIN_SRC emacs-lisp
(use-package json-mode
  :ensure t)
#+END_SRC


* Url encode/decode
#+BEGIN_SRC emacs-lisp
(use-package urlenc
  :ensure t)
#+END_SRC
